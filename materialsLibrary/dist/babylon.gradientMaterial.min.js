var __decorate=this&&this.__decorate||function(e,i,r,n){if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)return Reflect.decorate(e,i,r,n);switch(arguments.length){case 2:return e.reduceRight(function(e,i){return i&&i(e)||e},i);case 3:return e.reduceRight(function(e,n){return void(n&&n(i,r))},void 0);case 4:return e.reduceRight(function(e,n){return n&&n(i,r,e)||e},n)}},BABYLON;!function(e){var i=function(e){function i(){e.call(this),this.DIFFUSE=!1,this.CLIPPLANE=!1,this.ALPHATEST=!1,this.POINTSIZE=!1,this.FOG=!1,this.LIGHT0=!1,this.LIGHT1=!1,this.LIGHT2=!1,this.LIGHT3=!1,this.SPOTLIGHT0=!1,this.SPOTLIGHT1=!1,this.SPOTLIGHT2=!1,this.SPOTLIGHT3=!1,this.HEMILIGHT0=!1,this.HEMILIGHT1=!1,this.HEMILIGHT2=!1,this.HEMILIGHT3=!1,this.DIRLIGHT0=!1,this.DIRLIGHT1=!1,this.DIRLIGHT2=!1,this.DIRLIGHT3=!1,this.POINTLIGHT0=!1,this.POINTLIGHT1=!1,this.POINTLIGHT2=!1,this.POINTLIGHT3=!1,this.SHADOW0=!1,this.SHADOW1=!1,this.SHADOW2=!1,this.SHADOW3=!1,this.SHADOWS=!1,this.SHADOWVSM0=!1,this.SHADOWVSM1=!1,this.SHADOWVSM2=!1,this.SHADOWVSM3=!1,this.SHADOWPCF0=!1,this.SHADOWPCF1=!1,this.SHADOWPCF2=!1,this.SHADOWPCF3=!1,this.NORMAL=!1,this.UV1=!1,this.UV2=!1,this.VERTEXCOLOR=!1,this.VERTEXALPHA=!1,this.NUM_BONE_INFLUENCERS=0,this.BonesPerMesh=0,this.INSTANCES=!1,this._keys=Object.keys(this)}return __extends(i,e),i}(e.MaterialDefines),r=function(r){function n(n,t){r.call(this,n,t),this.topColor=new e.Color3(1,0,0),this.topColorAlpha=1,this.bottomColor=new e.Color3(0,0,1),this.bottomColorAlpha=1,this.offset=0,this.smoothness=1,this.disableLighting=!1,this._worldViewProjectionMatrix=e.Matrix.Zero(),this._scaledDiffuse=new e.Color3,this._defines=new i,this._cachedDefines=new i,this._cachedDefines.BonesPerMesh=-1}return __extends(n,r),n.prototype.needAlphaBlending=function(){return this.alpha<1||this.topColorAlpha<1||this.bottomColorAlpha<1},n.prototype.needAlphaTesting=function(){return!0},n.prototype.getAlphaTestTexture=function(){return null},n.prototype._checkCache=function(e,i,r){return i?this._defines.INSTANCES!==r?!1:i._materialDefines&&i._materialDefines.isEqual(this._defines)?!0:!1:!0},n.prototype.isReady=function(r,n){if(this.checkReadyOnlyOnce&&this._wasPreviouslyReady)return!0;var t=this.getScene();if(!this.checkReadyOnEveryCall&&this._renderId===t.getRenderId()&&this._checkCache(t,r,n))return!0;var o=t.getEngine(),s=!1,a=!1;this._defines.reset(),t.clipPlane&&(this._defines.CLIPPLANE=!0),o.getAlphaTesting()&&(this._defines.ALPHATEST=!0),(this.pointsCloud||t.forcePointsCloud)&&(this._defines.POINTSIZE=!0),t.fogEnabled&&r&&r.applyFog&&t.fogMode!==e.Scene.FOGMODE_NONE&&this.fogEnabled&&(this._defines.FOG=!0);if(t.lightsEnabled&&!this.disableLighting&&(s=e.MaterialHelper.PrepareDefinesForLights(t,r,this._defines)),r&&(s&&r.isVerticesDataPresent(e.VertexBuffer.NormalKind)&&(this._defines.NORMAL=!0),a&&(r.isVerticesDataPresent(e.VertexBuffer.UVKind)&&(this._defines.UV1=!0),r.isVerticesDataPresent(e.VertexBuffer.UV2Kind)&&(this._defines.UV2=!0)),r.useVertexColors&&r.isVerticesDataPresent(e.VertexBuffer.ColorKind)&&(this._defines.VERTEXCOLOR=!0,r.hasVertexAlpha&&(this._defines.VERTEXALPHA=!0)),r.useBones&&r.computeBonesUsingShaders&&(this._defines.NUM_BONE_INFLUENCERS=r.numBoneInfluencers,this._defines.BonesPerMesh=r.skeleton.bones.length+1),n&&(this._defines.INSTANCES=!0)),!this._defines.isEqual(this._cachedDefines)){this._defines.cloneTo(this._cachedDefines),t.resetCachedMaterial();var f=new e.EffectFallbacks;this._defines.FOG&&f.addFallback(1,"FOG"),e.MaterialHelper.HandleFallbacksForShadows(this._defines,f),this._defines.NUM_BONE_INFLUENCERS>0&&f.addCPUSkinningFallback(0,r);var l=[e.VertexBuffer.PositionKind];this._defines.NORMAL&&l.push(e.VertexBuffer.NormalKind),this._defines.UV1&&l.push(e.VertexBuffer.UVKind),this._defines.UV2&&l.push(e.VertexBuffer.UV2Kind),this._defines.VERTEXCOLOR&&l.push(e.VertexBuffer.ColorKind),e.MaterialHelper.PrepareAttributesForBones(l,r,this._defines,f),e.MaterialHelper.PrepareAttributesForInstances(l,this._defines);var h="gradient",d=this._defines.toString();this._effect=t.getEngine().createEffect(h,l,["world","view","viewProjection","vEyePosition","vLightsType","vDiffuseColor","vLightData0","vLightDiffuse0","vLightSpecular0","vLightDirection0","vLightGround0","lightMatrix0","vLightData1","vLightDiffuse1","vLightSpecular1","vLightDirection1","vLightGround1","lightMatrix1","vLightData2","vLightDiffuse2","vLightSpecular2","vLightDirection2","vLightGround2","lightMatrix2","vLightData3","vLightDiffuse3","vLightSpecular3","vLightDirection3","vLightGround3","lightMatrix3","vFogInfos","vFogColor","pointSize","vDiffuseInfos","mBones","vClipPlane","diffuseMatrix","shadowsInfo0","shadowsInfo1","shadowsInfo2","shadowsInfo3","depthValues","topColor","bottomColor","offset","smoothness"],["diffuseSampler","shadowSampler0","shadowSampler1","shadowSampler2","shadowSampler3"],d,f,this.onCompiled,this.onError)}return this._effect.isReady()?(this._renderId=t.getRenderId(),this._wasPreviouslyReady=!0,r&&(r._materialDefines||(r._materialDefines=new i),this._defines.cloneTo(r._materialDefines)),!0):!1},n.prototype.bindOnlyWorldMatrix=function(e){this._effect.setMatrix("world",e)},n.prototype.bind=function(i,n){var t=this.getScene();this.bindOnlyWorldMatrix(i),this._effect.setMatrix("viewProjection",t.getTransformMatrix()),e.MaterialHelper.BindBonesParameters(n,this._effect),t.getCachedMaterial()!==this&&(e.MaterialHelper.BindClipPlane(this._effect,t),this.pointsCloud&&this._effect.setFloat("pointSize",this.pointSize),this._effect.setVector3("vEyePosition",t._mirroredCameraPosition?t._mirroredCameraPosition:t.activeCamera.position)),this._effect.setColor4("vDiffuseColor",this._scaledDiffuse,this.alpha*n.visibility),t.lightsEnabled&&!this.disableLighting&&e.MaterialHelper.BindLights(t,n,this._effect,this._defines),t.fogEnabled&&n.applyFog&&t.fogMode!==e.Scene.FOGMODE_NONE&&this._effect.setMatrix("view",t.getViewMatrix()),e.MaterialHelper.BindFogParameters(t,n,this._effect),this._effect.setColor4("topColor",this.topColor,this.topColorAlpha),this._effect.setColor4("bottomColor",this.bottomColor,this.bottomColorAlpha),this._effect.setFloat("offset",this.offset),this._effect.setFloat("smoothness",this.smoothness),r.prototype.bind.call(this,i,n)},n.prototype.getAnimatables=function(){return[]},n.prototype.dispose=function(e){r.prototype.dispose.call(this,e)},n.prototype.clone=function(i){var r=this;return e.SerializationHelper.Clone(function(){return new n(i,r.getScene())},this)},n.prototype.serialize=function(){var i=e.SerializationHelper.Serialize(this);return i.customType="BABYLON.GradientMaterial",i},n.Parse=function(i,r,t){return e.SerializationHelper.Parse(function(){return new n(i.name,r)},i,r,t)},__decorate([e.serializeAsColor3()],n.prototype,"topColor"),__decorate([e.serialize()],n.prototype,"topColorAlpha"),__decorate([e.serializeAsColor3()],n.prototype,"bottomColor"),__decorate([e.serialize()],n.prototype,"bottomColorAlpha"),__decorate([e.serialize()],n.prototype,"offset"),__decorate([e.serialize()],n.prototype,"smoothness"),__decorate([e.serialize()],n.prototype,"disableLighting"),n}(e.Material);e.GradientMaterial=r}(BABYLON||(BABYLON={})),BABYLON.Effect.ShadersStore.gradientVertexShader="precision highp float;\r\n\r\n\r\n// Attributes\r\nattribute vec3 position;\r\n#ifdef NORMAL\r\nattribute vec3 normal;\r\n#endif\r\n#ifdef UV1\r\nattribute vec2 uv;\r\n#endif\r\n#ifdef UV2\r\nattribute vec2 uv2;\r\n#endif\r\n#ifdef VERTEXCOLOR\r\nattribute vec4 color;\r\n#endif\r\n#include<bonesDeclaration>\r\n\r\n// Uniforms\r\n#include<instancesDeclaration>\r\n\r\nuniform mat4 view;\r\nuniform mat4 viewProjection;\r\n\r\n#ifdef DIFFUSE\r\nvarying vec2 vDiffuseUV;\r\nuniform mat4 diffuseMatrix;\r\nuniform vec2 vDiffuseInfos;\r\n#endif\r\n\r\n#ifdef POINTSIZE\r\nuniform float pointSize;\r\n#endif\r\n\r\n// Output\r\nvarying vec3 vPositionW;\r\n#ifdef NORMAL\r\nvarying vec3 vNormalW;\r\n#endif\r\n\r\n#ifdef VERTEXCOLOR\r\nvarying vec4 vColor;\r\n#endif\r\n\r\n#include<clipPlaneVertexDeclaration>\r\n\r\n#include<fogVertexDeclaration>\r\n#include<shadowsVertexDeclaration>\r\n\r\nvoid main(void) {\r\n#include<instancesVertex>\r\n#include<bonesVertex> \r\n\r\n	gl_Position = viewProjection * finalWorld * vec4(position, 1.0);\r\n\r\n	vec4 worldPos = finalWorld * vec4(position, 1.0);\r\n	vPositionW = vec3(worldPos);\r\n\r\n#ifdef NORMAL\r\n	vNormalW = normalize(vec3(finalWorld * vec4(normal, 0.0)));\r\n#endif\r\n\r\n	// Texture coordinates\r\n#ifndef UV1\r\n	vec2 uv = vec2(0., 0.);\r\n#endif\r\n#ifndef UV2\r\n	vec2 uv2 = vec2(0., 0.);\r\n#endif\r\n\r\n#ifdef DIFFUSE\r\n	if (vDiffuseInfos.x == 0.)\r\n	{\r\n		vDiffuseUV = vec2(diffuseMatrix * vec4(uv, 1.0, 0.0));\r\n	}\r\n	else\r\n	{\r\n		vDiffuseUV = vec2(diffuseMatrix * vec4(uv2, 1.0, 0.0));\r\n	}\r\n#endif\r\n\r\n	// Clip plane\r\n#include<clipPlaneVertex>\r\n\r\n    // Fog\r\n#include<fogVertex>\r\n#include<shadowsVertex>\r\n\r\n	// Vertex color\r\n#ifdef VERTEXCOLOR\r\n	vColor = color;\r\n#endif\r\n\r\n	// Point size\r\n#ifdef POINTSIZE\r\n	gl_PointSize = pointSize;\r\n#endif\r\n}\r\n",BABYLON.Effect.ShadersStore.gradientPixelShader="precision highp float;\r\n\r\n// Constants\r\nuniform vec3 vEyePosition;\r\nuniform vec4 vDiffuseColor;\r\n\r\n// Gradient variables\r\nuniform vec4 topColor;\r\nuniform vec4 bottomColor;\r\nuniform float offset;\r\nuniform float smoothness;\r\n\r\n// Input\r\nvarying vec3 vPositionW;\r\n\r\n#ifdef NORMAL\r\nvarying vec3 vNormalW;\r\n#endif\r\n\r\n#ifdef VERTEXCOLOR\r\nvarying vec4 vColor;\r\n#endif\r\n\r\n// Lights\r\n\r\n#include<light0FragmentDeclaration>\r\n#include<light1FragmentDeclaration>\r\n#include<light2FragmentDeclaration>\r\n#include<light3FragmentDeclaration>\r\n\r\n\r\n#include<lightsFragmentFunctions>\r\n#include<shadowsFragmentFunctions>\r\n\r\n// Samplers\r\n#ifdef DIFFUSE\r\nvarying vec2 vDiffuseUV;\r\nuniform sampler2D diffuseSampler;\r\nuniform vec2 vDiffuseInfos;\r\n#endif\r\n\r\n#include<clipPlaneFragmentDeclaration>\r\n\r\n// Fog\r\n#include<fogFragmentDeclaration>\r\n\r\nvoid main(void) {\r\n#include<clipPlaneFragment>\r\n\r\n	vec3 viewDirectionW = normalize(vEyePosition - vPositionW);\r\n\r\n    float h = normalize(vPositionW).y + offset;\r\n    float mysmoothness = clamp(smoothness, 0.01, max(smoothness, 10.));\r\n\r\n    vec4 baseColor = mix(bottomColor, topColor, max(pow(max(h, 0.0), mysmoothness), 0.0));\r\n\r\n	// Base color\r\n	vec3 diffuseColor = baseColor.rgb;\r\n\r\n	// Alpha\r\n	float alpha = baseColor.a;\r\n\r\n\r\n#ifdef ALPHATEST\r\n	if (baseColor.a < 0.4)\r\n		discard;\r\n#endif\r\n\r\n#ifdef VERTEXCOLOR\r\n	baseColor.rgb *= vColor.rgb;\r\n#endif\r\n\r\n	// Bump\r\n#ifdef NORMAL\r\n	vec3 normalW = normalize(vNormalW);\r\n#else\r\n	vec3 normalW = vec3(1.0, 1.0, 1.0);\r\n#endif\r\n\r\n	// Lighting\r\n	vec3 diffuseBase = vec3(0., 0., 0.);\r\n	float shadow = 1.;\r\n    float glossiness = 0.;\r\n    \r\n#include<light0Fragment>\r\n#include<light1Fragment>\r\n#include<light2Fragment>\r\n#include<light3Fragment>\r\n\r\n#ifdef VERTEXALPHA\r\n	alpha *= vColor.a;\r\n#endif\r\n\r\n	vec3 finalDiffuse = clamp(diffuseBase * diffuseColor, 0.0, 1.0) * baseColor.rgb;\r\n\r\n	// Composition\r\n	vec4 color = vec4(finalDiffuse, alpha);\r\n\r\n#include<fogFragment>\r\n\r\n	gl_FragColor = color;\r\n}";